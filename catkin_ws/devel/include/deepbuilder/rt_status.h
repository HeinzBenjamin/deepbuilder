// Generated by gencpp from file deepbuilder/rt_status.msg
// DO NOT EDIT!


#ifndef DEEPBUILDER_MESSAGE_RT_STATUS_H
#define DEEPBUILDER_MESSAGE_RT_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <my_msgs/state.h>
#include <my_msgs/action.h>

namespace deepbuilder
{
template <class ContainerAllocator>
struct rt_status_
{
  typedef rt_status_<ContainerAllocator> Type;

  rt_status_()
    : gh_present(false)
    , agent_present(false)
    , ros_tick(0)
    , current_controller()
    , state()
    , action()  {
    }
  rt_status_(const ContainerAllocator& _alloc)
    : gh_present(false)
    , agent_present(false)
    , ros_tick(0)
    , current_controller(_alloc)
    , state(_alloc)
    , action(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _gh_present_type;
  _gh_present_type gh_present;

   typedef uint8_t _agent_present_type;
  _agent_present_type agent_present;

   typedef int64_t _ros_tick_type;
  _ros_tick_type ros_tick;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _current_controller_type;
  _current_controller_type current_controller;

   typedef  ::my_msgs::state_<ContainerAllocator>  _state_type;
  _state_type state;

   typedef  ::my_msgs::action_<ContainerAllocator>  _action_type;
  _action_type action;





  typedef boost::shared_ptr< ::deepbuilder::rt_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::deepbuilder::rt_status_<ContainerAllocator> const> ConstPtr;

}; // struct rt_status_

typedef ::deepbuilder::rt_status_<std::allocator<void> > rt_status;

typedef boost::shared_ptr< ::deepbuilder::rt_status > rt_statusPtr;
typedef boost::shared_ptr< ::deepbuilder::rt_status const> rt_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::deepbuilder::rt_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::deepbuilder::rt_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace deepbuilder

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'deepbuilder': ['/home/ros/deepbuilder/catkin_ws/src/deepbuilder/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'my_msgs': ['/home/ros/deepbuilder/catkin_ws/src/my_msgs/msg'], 'rosbridge_msgs': ['/opt/ros/kinetic/share/rosbridge_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::deepbuilder::rt_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::deepbuilder::rt_status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deepbuilder::rt_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deepbuilder::rt_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deepbuilder::rt_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deepbuilder::rt_status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::deepbuilder::rt_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "72a571d7c6714cec7e8e029ca7689a9e";
  }

  static const char* value(const ::deepbuilder::rt_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x72a571d7c6714cecULL;
  static const uint64_t static_value2 = 0x7e8e029ca7689a9eULL;
};

template<class ContainerAllocator>
struct DataType< ::deepbuilder::rt_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "deepbuilder/rt_status";
  }

  static const char* value(const ::deepbuilder::rt_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::deepbuilder::rt_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#this should contain ALL information about the runtime\n\
bool gh_present\n\
bool agent_present\n\
int64 ros_tick\n\
string current_controller\n\
my_msgs/state state\n\
my_msgs/action action\n\
================================================================================\n\
MSG: my_msgs/state\n\
string action_id\n\
bool out_of_reach\n\
bool self_collision\n\
geometry_msgs/Pose last_tcp\n\
int32 fastest_box\n\
int32 highest_box\n\
float32 current_height\n\
geometry_msgs/Pose[] box_poses\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: my_msgs/action\n\
string id\n\
float32 A0\n\
float32 A1\n\
float32 A2\n\
float32 A3\n\
float32 A4\n\
float32 A5\n\
";
  }

  static const char* value(const ::deepbuilder::rt_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::deepbuilder::rt_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gh_present);
      stream.next(m.agent_present);
      stream.next(m.ros_tick);
      stream.next(m.current_controller);
      stream.next(m.state);
      stream.next(m.action);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rt_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::deepbuilder::rt_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::deepbuilder::rt_status_<ContainerAllocator>& v)
  {
    s << indent << "gh_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gh_present);
    s << indent << "agent_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.agent_present);
    s << indent << "ros_tick: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ros_tick);
    s << indent << "current_controller: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.current_controller);
    s << indent << "state: ";
    s << std::endl;
    Printer< ::my_msgs::state_<ContainerAllocator> >::stream(s, indent + "  ", v.state);
    s << indent << "action: ";
    s << std::endl;
    Printer< ::my_msgs::action_<ContainerAllocator> >::stream(s, indent + "  ", v.action);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEEPBUILDER_MESSAGE_RT_STATUS_H
