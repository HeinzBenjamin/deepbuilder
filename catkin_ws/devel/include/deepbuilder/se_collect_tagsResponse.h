// Generated by gencpp from file deepbuilder/se_collect_tagsResponse.msg
// DO NOT EDIT!


#ifndef DEEPBUILDER_MESSAGE_SE_COLLECT_TAGSRESPONSE_H
#define DEEPBUILDER_MESSAGE_SE_COLLECT_TAGSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace deepbuilder
{
template <class ContainerAllocator>
struct se_collect_tagsResponse_
{
  typedef se_collect_tagsResponse_<ContainerAllocator> Type;

  se_collect_tagsResponse_()
    : tag_poses()
    , types()
    , ids()  {
    }
  se_collect_tagsResponse_(const ContainerAllocator& _alloc)
    : tag_poses(_alloc)
    , types(_alloc)
    , ids(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _tag_poses_type;
  _tag_poses_type tag_poses;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _types_type;
  _types_type types;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _ids_type;
  _ids_type ids;





  typedef boost::shared_ptr< ::deepbuilder::se_collect_tagsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::deepbuilder::se_collect_tagsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct se_collect_tagsResponse_

typedef ::deepbuilder::se_collect_tagsResponse_<std::allocator<void> > se_collect_tagsResponse;

typedef boost::shared_ptr< ::deepbuilder::se_collect_tagsResponse > se_collect_tagsResponsePtr;
typedef boost::shared_ptr< ::deepbuilder::se_collect_tagsResponse const> se_collect_tagsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::deepbuilder::se_collect_tagsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::deepbuilder::se_collect_tagsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace deepbuilder

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'moveit_msgs': ['/opt/ros/kinetic/share/moveit_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'object_recognition_msgs': ['/opt/ros/kinetic/share/object_recognition_msgs/cmake/../msg'], 'octomap_msgs': ['/opt/ros/kinetic/share/octomap_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'my_msgs': ['/home/ros/deepbuilder/catkin_ws/src/my_msgs/msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'rosbridge_msgs': ['/opt/ros/kinetic/share/rosbridge_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::deepbuilder::se_collect_tagsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::deepbuilder::se_collect_tagsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deepbuilder::se_collect_tagsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deepbuilder::se_collect_tagsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deepbuilder::se_collect_tagsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deepbuilder::se_collect_tagsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::deepbuilder::se_collect_tagsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ed7bb1e8d94ce303317cf11ef2ce623d";
  }

  static const char* value(const ::deepbuilder::se_collect_tagsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xed7bb1e8d94ce303ULL;
  static const uint64_t static_value2 = 0x317cf11ef2ce623dULL;
};

template<class ContainerAllocator>
struct DataType< ::deepbuilder::se_collect_tagsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "deepbuilder/se_collect_tagsResponse";
  }

  static const char* value(const ::deepbuilder::se_collect_tagsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::deepbuilder::se_collect_tagsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] tag_poses\n\
int8[] types\n\
int8[] ids\n\
";
  }

  static const char* value(const ::deepbuilder::se_collect_tagsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::deepbuilder::se_collect_tagsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tag_poses);
      stream.next(m.types);
      stream.next(m.ids);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct se_collect_tagsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::deepbuilder::se_collect_tagsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::deepbuilder::se_collect_tagsResponse_<ContainerAllocator>& v)
  {
    s << indent << "tag_poses[]" << std::endl;
    for (size_t i = 0; i < v.tag_poses.size(); ++i)
    {
      s << indent << "  tag_poses[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.tag_poses[i]);
    }
    s << indent << "types[]" << std::endl;
    for (size_t i = 0; i < v.types.size(); ++i)
    {
      s << indent << "  types[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.types[i]);
    }
    s << indent << "ids[]" << std::endl;
    for (size_t i = 0; i < v.ids.size(); ++i)
    {
      s << indent << "  ids[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.ids[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEEPBUILDER_MESSAGE_SE_COLLECT_TAGSRESPONSE_H
