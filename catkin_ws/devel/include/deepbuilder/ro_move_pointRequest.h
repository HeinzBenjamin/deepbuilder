// Generated by gencpp from file deepbuilder/ro_move_pointRequest.msg
// DO NOT EDIT!


#ifndef DEEPBUILDER_MESSAGE_RO_MOVE_POINTREQUEST_H
#define DEEPBUILDER_MESSAGE_RO_MOVE_POINTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace deepbuilder
{
template <class ContainerAllocator>
struct ro_move_pointRequest_
{
  typedef ro_move_pointRequest_<ContainerAllocator> Type;

  ro_move_pointRequest_()
    : goal_pose()
    , speed(0.0)
    , wait(false)  {
    }
  ro_move_pointRequest_(const ContainerAllocator& _alloc)
    : goal_pose(_alloc)
    , speed(0.0)
    , wait(false)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _goal_pose_type;
  _goal_pose_type goal_pose;

   typedef float _speed_type;
  _speed_type speed;

   typedef uint8_t _wait_type;
  _wait_type wait;





  typedef boost::shared_ptr< ::deepbuilder::ro_move_pointRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::deepbuilder::ro_move_pointRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ro_move_pointRequest_

typedef ::deepbuilder::ro_move_pointRequest_<std::allocator<void> > ro_move_pointRequest;

typedef boost::shared_ptr< ::deepbuilder::ro_move_pointRequest > ro_move_pointRequestPtr;
typedef boost::shared_ptr< ::deepbuilder::ro_move_pointRequest const> ro_move_pointRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::deepbuilder::ro_move_pointRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::deepbuilder::ro_move_pointRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace deepbuilder

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'moveit_msgs': ['/opt/ros/kinetic/share/moveit_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'object_recognition_msgs': ['/opt/ros/kinetic/share/object_recognition_msgs/cmake/../msg'], 'octomap_msgs': ['/opt/ros/kinetic/share/octomap_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'my_msgs': ['/home/ros/deepbuilder/catkin_ws/src/my_msgs/msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'rosbridge_msgs': ['/opt/ros/kinetic/share/rosbridge_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::deepbuilder::ro_move_pointRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::deepbuilder::ro_move_pointRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deepbuilder::ro_move_pointRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deepbuilder::ro_move_pointRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deepbuilder::ro_move_pointRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deepbuilder::ro_move_pointRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::deepbuilder::ro_move_pointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6807ec73b5603e91e4046e58d434e2e1";
  }

  static const char* value(const ::deepbuilder::ro_move_pointRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6807ec73b5603e91ULL;
  static const uint64_t static_value2 = 0xe4046e58d434e2e1ULL;
};

template<class ContainerAllocator>
struct DataType< ::deepbuilder::ro_move_pointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "deepbuilder/ro_move_pointRequest";
  }

  static const char* value(const ::deepbuilder::ro_move_pointRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::deepbuilder::ro_move_pointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] goal_pose\n\
float32 speed\n\
bool wait\n\
";
  }

  static const char* value(const ::deepbuilder::ro_move_pointRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::deepbuilder::ro_move_pointRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal_pose);
      stream.next(m.speed);
      stream.next(m.wait);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ro_move_pointRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::deepbuilder::ro_move_pointRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::deepbuilder::ro_move_pointRequest_<ContainerAllocator>& v)
  {
    s << indent << "goal_pose[]" << std::endl;
    for (size_t i = 0; i < v.goal_pose.size(); ++i)
    {
      s << indent << "  goal_pose[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.goal_pose[i]);
    }
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "wait: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wait);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEEPBUILDER_MESSAGE_RO_MOVE_POINTREQUEST_H
