// Generated by gencpp from file deepbuilder/se_get_valuesResponse.msg
// DO NOT EDIT!


#ifndef DEEPBUILDER_MESSAGE_SE_GET_VALUESRESPONSE_H
#define DEEPBUILDER_MESSAGE_SE_GET_VALUESRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <my_msgs/float_array.h>

namespace deepbuilder
{
template <class ContainerAllocator>
struct se_get_valuesResponse_
{
  typedef se_get_valuesResponse_<ContainerAllocator> Type;

  se_get_valuesResponse_()
    : values()  {
    }
  se_get_valuesResponse_(const ContainerAllocator& _alloc)
    : values(_alloc)  {
  (void)_alloc;
    }



   typedef  ::my_msgs::float_array_<ContainerAllocator>  _values_type;
  _values_type values;





  typedef boost::shared_ptr< ::deepbuilder::se_get_valuesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::deepbuilder::se_get_valuesResponse_<ContainerAllocator> const> ConstPtr;

}; // struct se_get_valuesResponse_

typedef ::deepbuilder::se_get_valuesResponse_<std::allocator<void> > se_get_valuesResponse;

typedef boost::shared_ptr< ::deepbuilder::se_get_valuesResponse > se_get_valuesResponsePtr;
typedef boost::shared_ptr< ::deepbuilder::se_get_valuesResponse const> se_get_valuesResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::deepbuilder::se_get_valuesResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::deepbuilder::se_get_valuesResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace deepbuilder

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'deepbuilder': ['/home/ros/deepbuilder/catkin_ws/src/deepbuilder/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'my_msgs': ['/home/ros/deepbuilder/catkin_ws/src/my_msgs/msg'], 'rosbridge_msgs': ['/opt/ros/kinetic/share/rosbridge_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::deepbuilder::se_get_valuesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::deepbuilder::se_get_valuesResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deepbuilder::se_get_valuesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deepbuilder::se_get_valuesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deepbuilder::se_get_valuesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deepbuilder::se_get_valuesResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::deepbuilder::se_get_valuesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "afc255e103ebf1fda6e279c644d870f5";
  }

  static const char* value(const ::deepbuilder::se_get_valuesResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xafc255e103ebf1fdULL;
  static const uint64_t static_value2 = 0xa6e279c644d870f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::deepbuilder::se_get_valuesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "deepbuilder/se_get_valuesResponse";
  }

  static const char* value(const ::deepbuilder::se_get_valuesResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::deepbuilder::se_get_valuesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/float_array values\n\
\n\
================================================================================\n\
MSG: my_msgs/float_array\n\
float32[] values\n\
";
  }

  static const char* value(const ::deepbuilder::se_get_valuesResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::deepbuilder::se_get_valuesResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.values);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct se_get_valuesResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::deepbuilder::se_get_valuesResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::deepbuilder::se_get_valuesResponse_<ContainerAllocator>& v)
  {
    s << indent << "values: ";
    s << std::endl;
    Printer< ::my_msgs::float_array_<ContainerAllocator> >::stream(s, indent + "  ", v.values);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEEPBUILDER_MESSAGE_SE_GET_VALUESRESPONSE_H
