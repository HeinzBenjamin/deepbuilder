// Generated by gencpp from file my_msgs/state.msg
// DO NOT EDIT!


#ifndef MY_MSGS_MESSAGE_STATE_H
#define MY_MSGS_MESSAGE_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>

namespace my_msgs
{
template <class ContainerAllocator>
struct state_
{
  typedef state_<ContainerAllocator> Type;

  state_()
    : action_id()
    , is_printable(false)
    , action_tcp()
    , displaced_tcps()
    , state_compressed()
    , compression_loss(0.0)
    , state_mesh_vertices()
    , state_mesh_indices()
    , current_height(0.0)
    , current_tcp_displacements()
    , current_smoothness(0.0)
    , current_area(0.0)  {
    }
  state_(const ContainerAllocator& _alloc)
    : action_id(_alloc)
    , is_printable(false)
    , action_tcp(_alloc)
    , displaced_tcps(_alloc)
    , state_compressed(_alloc)
    , compression_loss(0.0)
    , state_mesh_vertices(_alloc)
    , state_mesh_indices(_alloc)
    , current_height(0.0)
    , current_tcp_displacements(_alloc)
    , current_smoothness(0.0)
    , current_area(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_id_type;
  _action_id_type action_id;

   typedef uint8_t _is_printable_type;
  _is_printable_type is_printable;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _action_tcp_type;
  _action_tcp_type action_tcp;

   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _displaced_tcps_type;
  _displaced_tcps_type displaced_tcps;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _state_compressed_type;
  _state_compressed_type state_compressed;

   typedef float _compression_loss_type;
  _compression_loss_type compression_loss;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _state_mesh_vertices_type;
  _state_mesh_vertices_type state_mesh_vertices;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _state_mesh_indices_type;
  _state_mesh_indices_type state_mesh_indices;

   typedef float _current_height_type;
  _current_height_type current_height;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _current_tcp_displacements_type;
  _current_tcp_displacements_type current_tcp_displacements;

   typedef float _current_smoothness_type;
  _current_smoothness_type current_smoothness;

   typedef float _current_area_type;
  _current_area_type current_area;





  typedef boost::shared_ptr< ::my_msgs::state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_msgs::state_<ContainerAllocator> const> ConstPtr;

}; // struct state_

typedef ::my_msgs::state_<std::allocator<void> > state;

typedef boost::shared_ptr< ::my_msgs::state > statePtr;
typedef boost::shared_ptr< ::my_msgs::state const> stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_msgs::state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_msgs::state_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace my_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'my_msgs': ['/home/ros/deepbuilder/catkin_ws/src/my_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::state_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_msgs::state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b716ae9e4e97f8d790d147cc9fc70235";
  }

  static const char* value(const ::my_msgs::state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb716ae9e4e97f8d7ULL;
  static const uint64_t static_value2 = 0x90d147cc9fc70235ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_msgs::state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/state";
  }

  static const char* value(const ::my_msgs::state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_msgs::state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string action_id\n\
bool is_printable\n\
geometry_msgs/Pose action_tcp\n\
geometry_msgs/Pose[] displaced_tcps\n\
float32[] state_compressed\n\
float32 compression_loss\n\
float32[] state_mesh_vertices\n\
int32[] state_mesh_indices\n\
float32 current_height\n\
float32[] current_tcp_displacements\n\
float32 current_smoothness\n\
float32 current_area\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::my_msgs::state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_msgs::state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action_id);
      stream.next(m.is_printable);
      stream.next(m.action_tcp);
      stream.next(m.displaced_tcps);
      stream.next(m.state_compressed);
      stream.next(m.compression_loss);
      stream.next(m.state_mesh_vertices);
      stream.next(m.state_mesh_indices);
      stream.next(m.current_height);
      stream.next(m.current_tcp_displacements);
      stream.next(m.current_smoothness);
      stream.next(m.current_area);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_msgs::state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_msgs::state_<ContainerAllocator>& v)
  {
    s << indent << "action_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action_id);
    s << indent << "is_printable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_printable);
    s << indent << "action_tcp: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.action_tcp);
    s << indent << "displaced_tcps[]" << std::endl;
    for (size_t i = 0; i < v.displaced_tcps.size(); ++i)
    {
      s << indent << "  displaced_tcps[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.displaced_tcps[i]);
    }
    s << indent << "state_compressed[]" << std::endl;
    for (size_t i = 0; i < v.state_compressed.size(); ++i)
    {
      s << indent << "  state_compressed[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.state_compressed[i]);
    }
    s << indent << "compression_loss: ";
    Printer<float>::stream(s, indent + "  ", v.compression_loss);
    s << indent << "state_mesh_vertices[]" << std::endl;
    for (size_t i = 0; i < v.state_mesh_vertices.size(); ++i)
    {
      s << indent << "  state_mesh_vertices[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.state_mesh_vertices[i]);
    }
    s << indent << "state_mesh_indices[]" << std::endl;
    for (size_t i = 0; i < v.state_mesh_indices.size(); ++i)
    {
      s << indent << "  state_mesh_indices[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.state_mesh_indices[i]);
    }
    s << indent << "current_height: ";
    Printer<float>::stream(s, indent + "  ", v.current_height);
    s << indent << "current_tcp_displacements[]" << std::endl;
    for (size_t i = 0; i < v.current_tcp_displacements.size(); ++i)
    {
      s << indent << "  current_tcp_displacements[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.current_tcp_displacements[i]);
    }
    s << indent << "current_smoothness: ";
    Printer<float>::stream(s, indent + "  ", v.current_smoothness);
    s << indent << "current_area: ";
    Printer<float>::stream(s, indent + "  ", v.current_area);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MSGS_MESSAGE_STATE_H
