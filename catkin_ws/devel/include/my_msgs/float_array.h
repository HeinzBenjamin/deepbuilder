// Generated by gencpp from file my_msgs/float_array.msg
// DO NOT EDIT!


#ifndef MY_MSGS_MESSAGE_FLOAT_ARRAY_H
#define MY_MSGS_MESSAGE_FLOAT_ARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_msgs
{
template <class ContainerAllocator>
struct float_array_
{
  typedef float_array_<ContainerAllocator> Type;

  float_array_()
    : values()  {
    }
  float_array_(const ContainerAllocator& _alloc)
    : values(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _values_type;
  _values_type values;





  typedef boost::shared_ptr< ::my_msgs::float_array_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_msgs::float_array_<ContainerAllocator> const> ConstPtr;

}; // struct float_array_

typedef ::my_msgs::float_array_<std::allocator<void> > float_array;

typedef boost::shared_ptr< ::my_msgs::float_array > float_arrayPtr;
typedef boost::shared_ptr< ::my_msgs::float_array const> float_arrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_msgs::float_array_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_msgs::float_array_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace my_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'my_msgs': ['/home/ros/deepbuilder/catkin_ws/src/my_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::float_array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::float_array_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::float_array_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::float_array_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::float_array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::float_array_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_msgs::float_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e2c9c4a808bfa8ef83980bb0222137bf";
  }

  static const char* value(const ::my_msgs::float_array_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe2c9c4a808bfa8efULL;
  static const uint64_t static_value2 = 0x83980bb0222137bfULL;
};

template<class ContainerAllocator>
struct DataType< ::my_msgs::float_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/float_array";
  }

  static const char* value(const ::my_msgs::float_array_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_msgs::float_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] values\n\
";
  }

  static const char* value(const ::my_msgs::float_array_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_msgs::float_array_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.values);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct float_array_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_msgs::float_array_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_msgs::float_array_<ContainerAllocator>& v)
  {
    s << indent << "values[]" << std::endl;
    for (size_t i = 0; i < v.values.size(); ++i)
    {
      s << indent << "  values[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.values[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MSGS_MESSAGE_FLOAT_ARRAY_H
